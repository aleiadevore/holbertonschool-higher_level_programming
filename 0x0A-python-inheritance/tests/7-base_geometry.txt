==============================
doctest for 7-base_geometry.py
==============================
``BaseGeometry`` creates a class and validates input

SUCCESSFUL TEST CONDITIONS
==========================

Testing empty input
::
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Testing positive int
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", 3)

Testing float
::
>>> bg.integer_validator("name", 3.2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer

Testing 0
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: name must be greater than 0

Testing negative
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", -3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: name must be greater than 0

Testing string
::
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 13, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer
