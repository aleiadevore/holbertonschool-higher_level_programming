=============================
doctest for 0-add_integer.py
=============================
``add_integer()`` returns the sum of its arguments

SUCCESSFUL TEST CONDITIONS
==========================

testing addition of two integers
::
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(98, 1)
99

testing addition of two negative integers
::
>>> add_integer(-10, -40)
-50

testing addition of one integer
::
>>> add_integer(1)
99

testing addition of nothing
::
>>> add_integer(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 9, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

testing addition of a string and an integer
::
>>> add_integer("98", 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 12, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

testing addition of an integer and a string
::
>>> add_integer(2, "98")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 16, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer

testing addition of an integer and a string with mixed values
::
>>> add_integer(2, '1a3')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 16, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer

testing addition of two floats
::
>>> add_integer(1.03, 4.05)
5
